apply plugin: 'com.android.application'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

def versionCodeProperty = project.property('versionCode') as Integer
def includeSdkFromSourceProperty = 'includeSdkFromSource'
def includeSdkFromSource = project.hasProperty(includeSdkFromSourceProperty) &&
        project.property(includeSdkFromSourceProperty) as Boolean

afterEvaluate {
    def ndkVersion = 'ndkVersion'
    if (includeSdkFromSource && project.hasProperty(ndkVersion)) {
        android.ndkVersion = "${project.property(ndkVersion)}"
    }

    /*
    * Enable the application to consume the Video Android SDK directly from source
    * instead of from Bintray.
    *
    * The property is not defined by default when consuming the
    * application as a stand-alone project, but is defined by default in the Video Android SDK project.
    * This property enables the Video Android SDK project to build the application as a git subtree
    * with the contents of the source itself as a dependency. This coupling is intentional as it allows
    * SDK developers to iterate on SDK features within the application that is maintained in a separate
    * project.
    */
    dependencies {
        if (includeSdkFromSource) {
            debugImplementation project(':video')
            debugImplementation project(':video:ktx')
            releaseImplementation project(':video:ktx')
        } else {
            implementation "com.twilio:video-android-ktx:6.2.1"
        }
    }
}

android {
    compileSdkVersion 30
    buildToolsVersion '30.0.2'

    buildFeatures {
        viewBinding true
    }

    lintOptions {
        disable 'GradleDependency'
        warningsAsErrors true
        // TODO: Fix all baseline app warnings and errors GSDK-1984
        baseline file("lint-baseline.xml")
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
    }

    defaultConfig {
        applicationId "com.twilio.video.app"

        minSdkVersion 16
        targetSdkVersion 30

        versionName "0.1.0"
        versionCode versionCodeProperty

        vectorDrawables.useSupportLibrary = true

        multiDexEnabled true

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests {
            includeAndroidResources = true
        }
    }

    signingConfigs {
        release {
            storeFile file(keystore)
            storePassword keystorePassword
            keyAlias releaseKeyAlias
            keyPassword releaseKeyPassword
        }
        debug {
            storeFile file('video-android-app.keystore')
            storePassword 'android'
            keyAlias 'debug'
            keyPassword 'android'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            signingConfig signingConfigs.debug
        }
    }

    flavorDimensions "environment"

    productFlavors {
        internal {
            dimension "environment"
            applicationId "com.twilio.video.app.internal"
            buildConfigField 'String', 'ENVIRONMENT_DEFAULT', '"production"'
            buildConfigField 'String', 'APPCENTER_APP_KEY',
                    "\"${getLocalProperty("APPCENTER_APP_KEY")}\""
        }

        community {
            dimension "environment"
            applicationId "com.twilio.video.app.community"
            buildConfigField 'String', 'ENVIRONMENT_DEFAULT', '"production"'
            buildConfigField("String",
                    "TWILIO_ACCESS_TOKEN",
                    "\"${getLocalProperty("TWILIO_ACCESS_TOKEN")}\"")
        }
    }
}

dependencies {
    def daggerVersion = '2.25.4'
    def daggerAndroidProcessor = "com.google.dagger:dagger-android-processor:$daggerVersion"
    def daggerCompiler = "com.google.dagger:dagger-compiler:$daggerVersion"
    def retrofitVersion = '2.6.4'
    def espressoVersion = '3.3.0'
    def espresso = "androidx.test.espresso:espresso-core:$espressoVersion"
    def androidXTest = '1.3.0'
    def testCore = "androidx.test:core:$androidXTest"
    def junitExtensions = 'androidx.test.ext:junit-ktx:1.1.1'
    def lifecycleVersion = '2.2.0'
    def coroutinesAndroidVersion = '1.3.9'
    def fragmentVersion = '1.2.5'
    def uniflowVersion = '0.11.2'

    implementation 'com.facebook.conceal:conceal:2.0.2@aar'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesAndroidVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesAndroidVersion"
    // TODO Remove as part of https://issues.corp.twilio.com/browse/AHOYAPPS-445
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-rx2:$coroutinesAndroidVersion"
    implementation 'com.twilio:twilio-android-env:1.0.0@aar'
    implementation "androidx.constraintlayout:constraintlayout:2.0.1"
    implementation 'com.google.android.material:material:1.2.1'
    implementation "androidx.preference:preference-ktx:1.1.1"
    implementation "androidx.lifecycle:lifecycle-service:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata:$lifecycleVersion"
    implementation "androidx.fragment:fragment:$fragmentVersion"
    implementation "androidx.fragment:fragment-ktx:$fragmentVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"
    implementation 'com.jakewharton.timber:timber:4.7.1'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation "com.google.firebase:firebase-core:17.5.0"
    implementation 'com.google.firebase:firebase-auth:19.4.0'
    implementation 'com.google.firebase:firebase-crashlytics:17.2.2'
    implementation 'com.google.firebase:firebase-analytics:17.5.0'
    implementation 'com.google.android.gms:play-services-auth:18.1.0'
    implementation "com.google.dagger:dagger-android:$daggerVersion"
    implementation "com.google.dagger:dagger:$daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$daggerVersion"
    implementation "io.reactivex.rxjava2:rxjava:2.2.10"
    implementation "io.reactivex.rxjava2:rxandroid:2.1.1"
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-scalars:$retrofitVersion"
    implementation 'com.squareup.okhttp3:logging-interceptor:3.11.0'
    implementation 'com.twilio:audioswitch:1.1.0'
    implementation "io.uniflow:uniflow-androidx:$uniflowVersion"

    /*
     * Include as a compile time only dependency so Android Studio can resolve references
     * to com.android.ViewBinding.
     */
    compileOnly 'com.android.databinding:viewbinding:4.1.1'

    internalImplementation "com.microsoft.appcenter:appcenter-distribute:3.3.1"

    kapt daggerAndroidProcessor
    kapt daggerCompiler

    testImplementation testCore
    testImplementation espresso
    testImplementation junitExtensions
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesAndroidVersion"
    testImplementation 'junit:junit:4.13'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
    testImplementation 'org.robolectric:robolectric:4.3.1'
    testImplementation 'pl.pragmatists:JUnitParams:1.1.1'
    testImplementation 'android.arch.core:core-testing:1.1.1'
    testImplementation "io.uniflow:uniflow-androidx-test:$uniflowVersion"
    testImplementation "io.uniflow:uniflow-test:$uniflowVersion"
    testImplementation 'net.lachlanmckee:timber-junit-rule:1.0.1'
    kaptTest daggerAndroidProcessor
    kaptTest daggerCompiler

    androidTestImplementation testCore
    androidTestImplementation espresso
    androidTestImplementation junitExtensions
    androidTestImplementation "androidx.test:runner:$androidXTest"
    androidTestImplementation "androidx.test:rules:$androidXTest"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espressoVersion"
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'com.squareup.rx.idler:rx2-idler:0.9.1'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
}

def getLocalProperty(key) {
    if (project.rootProject.file('local.properties').exists()) {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        def value = properties.getProperty(key)
        return value
    } else {
        logger.log(LogLevel.WARN, "Could not find local.properties in " +
                project.rootProject.toString() + ". Community variant cannot connect to room" +
                " without credentials")
    }
}

apply plugin: 'com.google.gms.google-services'

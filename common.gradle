apply from: "$rootProject.projectDir/gradle.properties"

/**
 * Properties used for signing release builds. Note that these properties must be set in order
 * to build proper releases. We set placeholder values so developers are not required to set these
 * properties for local development
 */
ext.keystore = (project.hasProperty('androidKeystore') ?
        project.property('androidKeystore') : '/fake/path/to/keystore')
ext.keystorePassword = (project.hasProperty('androidKeystorePassword') ?
        project.property('androidKeystorePassword') : 'fakepassword')
ext.releaseKeyAlias = (project.hasProperty('androidReleaseKeyAlias') ?
        project.property('androidReleaseKeyAlias') : 'fakealias')
ext.releaseKeyPassword = (project.hasProperty('androidReleaseKeyPassword') ?
        project.property('androidReleaseKeyPassword') : 'fakepassword')

ext.generateVersionName = {
    return "${versionMajor}.${versionMinor}.${versionPatch}" +
           ((project.hasProperty("preRelease") && project.property("preRelease").toBoolean() == true) ?
                   "-${project.property("phase")}${project.property("phaseNumber")}" : '') +
           ((project.hasProperty("releaseCandidate") && project.property("releaseCandidate").toBoolean() == true) ?
                   "-rc${project.property("versionRc")}" : '') +
           ((project.hasProperty("snapshot") && project.property("snapshot").toBoolean() == true) ? "-SNAPSHOT" : '')
}

ext.generateVersionCode = {
    def version = "${versionMajor}.${versionMinor}.${versionPatch}"
    def build = version.toString().replace(".", "") as int

    return build * 1000
}

ext.getBintrayUsername = {
    def bintrayUsername  = System.getenv("BINTRAY_USERNAME");

    if (bintrayUsername == null) {
        logger.log(LogLevel.INFO, "Could not locate BINTRAY_USERNAME environment variable. " +
                "Trying local.properties")
        Properties properties = new Properties()
        if (project.rootProject.file('local.properties').exists()) {
            properties.load(project.rootProject.file('local.properties').newDataInputStream())
            bintrayUsername = properties.getProperty('BINTRAY_USERNAME')
        }
    }

    if (bintrayUsername == null) {
        logger.log(LogLevel.WARN, "Bintray username unavailable.")
    }

    return bintrayUsername;
}

ext.getBintrayPassword = {
    def bintrayPassword  = System.getenv("BINTRAY_PASSWORD");

    if (bintrayPassword == null) {
        logger.log(LogLevel.INFO, "Could not locate BINTRAY_PASSWORD environment variable. " +
                "Trying local.properties")
        Properties properties = new Properties()
        if (project.rootProject.file('local.properties').exists()) {
            properties.load(project.rootProject.file('local.properties').newDataInputStream())
            bintrayPassword = properties.getProperty('BINTRAY_PASSWORD')
        }
    }

    if (bintrayPassword == null) {
        logger.log(LogLevel.WARN, "Bintray password unavailable.")
    }

    return bintrayPassword;
}

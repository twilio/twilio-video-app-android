buildscript {
    ext.keystore = (project.hasProperty('androidKeystore') ?
            project.property('androidKeystore') : '/fake/path/to/keystore')
    ext.keystorePassword = (project.hasProperty('androidKeystorePassword') ?
            project.property('androidKeystorePassword') : 'fakepassword')
    ext.releaseKeyAlias = (project.hasProperty('androidReleaseKeyAlias') ?
            project.property('androidReleaseKeyAlias') : 'fakealias')
    ext.releaseKeyPassword = (project.hasProperty('androidReleaseKeyPassword') ?
            project.property('androidReleaseKeyPassword') : 'fakepassword')

    ext.getBintrayUsername = {
        def bintrayUsername  = System.getenv("BINTRAY_USERNAME")

        if (bintrayUsername == null) {
            logger.log(LogLevel.INFO, "Could not locate BINTRAY_USERNAME environment variable. " +
                    "Trying local.properties")
            Properties properties = new Properties()
            if (project.rootProject.file('local.properties').exists()) {
                properties.load(project.rootProject.file('local.properties').newDataInputStream())
                bintrayUsername = properties.getProperty('BINTRAY_USERNAME')
            }
        }

        if (bintrayUsername == null) {
            logger.log(LogLevel.WARN, "Bintray username unavailable.")
        }

        return bintrayUsername
    }

    ext.getBintrayPassword = {
        def bintrayPassword  = System.getenv("BINTRAY_PASSWORD")

        if (bintrayPassword == null) {
            logger.log(LogLevel.INFO, "Could not locate BINTRAY_PASSWORD environment variable. " +
                    "Trying local.properties")
            Properties properties = new Properties()
            if (project.rootProject.file('local.properties').exists()) {
                properties.load(project.rootProject.file('local.properties').newDataInputStream())
                bintrayPassword = properties.getProperty('BINTRAY_PASSWORD')
            }
        }

        if (bintrayPassword == null) {
            logger.log(LogLevel.WARN, "Bintray password unavailable.")
        }

        return bintrayPassword
    }

    repositories {
        google()
        jcenter()
        mavenCentral()
        maven {
            url  "https://twilio.bintray.com/releases"
        }
        maven {
            url  "https://twilio.bintray.com/internal-releases"
            credentials {
                username "${getBintrayUsername()}"
                password "${getBintrayPassword()}"
            }
        }
        maven {
            url  "https://twilio.bintray.com/snapshots"
            credentials {
                username "${getBintrayUsername()}"
                password "${getBintrayPassword()}"
            }
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.1'
        classpath "com.google.gms:google-services:4.3.4"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.4.21"
        classpath 'com.google.firebase:firebase-crashlytics-gradle:2.4.1'
    }
}

plugins {
    id "com.diffplug.spotless" version "5.8.2"
}
apply plugin: "com.diffplug.spotless"
spotless {
    format 'misc', {
        target '**/*.gradle', '**/*.md', '**/.gitignore'

        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
    java {
        target '**/*.java'
        googleJavaFormat().aosp()
    }
    kotlin {
        target '**/*.kt'
        ktlint()
    }
}

task incrementVersionCode {
    description = 'Increment the version code'
    group = 'Git'

    doLast {
        def githubToken = System.getenv("GITHUB_TOKEN")
        def repoSlug = "${System.env.CIRCLE_PROJECT_USERNAME}/${System.env.CIRCLE_PROJECT_REPONAME}"
        def gitRef = "https://${githubToken}@github.com/${repoSlug}.git"
        def remote = "upstream"
        def pushNullFile = new FileOutputStream("/dev/null")
        def versionCode = project.property("versionCode")
        def versionCodeTag = "v0.$versionCode"
        def newVersionCode = (versionCode as Integer) + 1

        exec {
            workingDir "${rootDir}"
            commandLine "git", "remote", "add", "${remote}", "${gitRef}"
            // Ignore exit value because remote may have been added in previous task
            ignoreExitValue true
        }

        exec {
            workingDir "${rootDir}"
            commandLine "git", "fetch", "${remote}"
        }

        def propertiesFile = new FileOutputStream("${rootDir}/gradle.properties")

        exec {
            workingDir "${rootDir}"
            commandLine "git", "tag", "-a", "$versionCodeTag", "-m", "$versionCodeTag"
        }

        exec {
            workingDir "${rootDir}"
            commandLine "echo", "versionCode=${newVersionCode}"
            standardOutput propertiesFile
        }

        exec {
            workingDir "${rootDir}"
            commandLine "echo", "New version code:"
        }

        exec {
            workingDir "${rootDir}"
            commandLine "cat", "gradle.properties"
        }

        exec {
            workingDir "${rootDir}"
            commandLine "git", "add", "gradle.properties"
        }

        exec {
            workingDir "${rootDir}"
            commandLine "git", "commit", "gradle.properties", "-m", "Bump version code [skip ci]"
        }

        exec {
            workingDir "${rootDir}"
            commandLine "git", "push", "--quiet", "${remote}", "${System.env.CIRCLE_BRANCH}"
            standardOutput pushNullFile
        }

        exec {
            workingDir "${rootDir}"
            commandLine "git", "push", "--quiet", "${remote}", "$versionCodeTag"
            standardOutput pushNullFile
        }
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        mavenCentral()
        maven {
            url 'https://oss.jfrog.org/artifactory/libs-snapshot/'
        }
        maven {
            url  "https://twilio.bintray.com/releases"
        }
        maven {
            url  "https://twilio.bintray.com/internal-releases"
            credentials {
                username "${getBintrayUsername()}"
                password "${getBintrayPassword()}"
            }
        }
        maven {
            url  "https://twilio.bintray.com/snapshots"
            credentials {
                username "${getBintrayUsername()}"
                password "${getBintrayPassword()}"
            }
        }
        maven {
            url 'https://jitpack.io'
        }
    }
}

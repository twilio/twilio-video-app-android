buildscript {
    ext.keystore = (project.hasProperty('androidKeystore') ?
            project.property('androidKeystore') : '/fake/path/to/keystore')
    ext.keystorePassword = (project.hasProperty('androidKeystorePassword') ?
            project.property('androidKeystorePassword') : 'fakepassword')
    ext.releaseKeyAlias = (project.hasProperty('androidReleaseKeyAlias') ?
            project.property('androidReleaseKeyAlias') : 'fakealias')
    ext.releaseKeyPassword = (project.hasProperty('androidReleaseKeyPassword') ?
            project.property('androidReleaseKeyPassword') : 'fakepassword')
    ext.firebaseAppId = (project.hasProperty('firebaseAppId') ?
            project.property('firebaseAppId') : 'fakeappid')

    ext.getPropertyValue =  { propertyKey ->
        def property  = System.getenv(propertyKey)
        if (property == null) {
            logger.log(LogLevel.INFO, "Could not locate $propertyKey as environment variable. " +
                    "Trying local.properties")
            Properties properties = new Properties()
            if (project.rootProject.file('local.properties').exists()) {
                properties.load(project.rootProject.file('local.properties').newDataInputStream())
                property = properties.getProperty(propertyKey)
            }
        }
        if (property == null) {
            logger.log(LogLevel.WARN, "$propertyKey unavailable.")
        }
        return property
    }

    repositories {
        google()
        mavenCentral()
        maven {
            url  "https://twilio.jfrog.io/artifactory/internal-releases"
            credentials {
                username "${getPropertyValue('ARTIFACTORY_USERNAME')}"
                password "${getPropertyValue('ARTIFACTORY_PASSWORD')}"
            }
            metadataSources {
                mavenPom()
                artifact()
            }
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.12.1'
        classpath "com.google.gms:google-services:4.4.2"
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.21'
        classpath 'com.google.firebase:firebase-crashlytics-gradle:3.0.2'
        classpath 'com.google.dagger:hilt-android-gradle-plugin:2.40.1'
        classpath 'com.google.firebase:firebase-appdistribution-gradle:5.0.0'
    }
}

plugins {
    id "com.diffplug.spotless" version '6.19.0'
    id 'org.ajoberstar.grgit' version '5.3.2'
}

apply plugin: "com.diffplug.spotless"
spotless {
    format 'misc', {
        target '**/*.gradle', '**/*.md', '**/.gitignore'

        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
    java {
        target '**/*.java'
        googleJavaFormat().aosp()
    }
    kotlin {
        target '**/*.kt'
        ktlint()
    }
}

tasks.register('incrementVersionCode') {
    description = 'Increment the version after a release'
    doLast {
        def githubUser = System.getenv("GIT_USER_NAME")
        def githubToken = System.getenv("GITHUB_TOKEN")
        def repoSlug = "${System.env.CIRCLE_PROJECT_USERNAME}/${System.env.CIRCLE_PROJECT_REPONAME}"
        def gitRef = "https://${githubUser}:${githubToken}@github.com/${repoSlug}.git"
        def remoteName = "upstream"
        def versionCode = project.property("versionCode")
        def versionCodeTag = "v0.$versionCode"
        def newVersionCode = (versionCode as Integer) + 1


        // Add remote if it doesn't exist
        try {
            grgit.remote.add(name: remoteName, url: gitRef)
        } catch (Exception ignored) {
            // Remote already exists
        }

        // fetch the branch
        grgit.fetch(remote: remoteName)

        // annotate tag
        grgit.tag.add(name: versionCodeTag, message: versionCodeTag, annotate: true)

        // update the version in gradle.properties
        def gradlePropertiesFile = file('gradle.properties')
        def properties = new Properties()
        gradlePropertiesFile.withInputStream { properties.load(it) }
        properties.setProperty("versionCode", newVersionCode.toString())
        gradlePropertiesFile.withOutputStream { properties.store(it, null) }
        println("New version code: ${newVersionCode}")

        // commit the change
        grgit.add(patterns: ['gradle.properties'])
        grgit.commit(message: "Bump patch version [skip ci]")
        grgit.push(remote: remoteName, refsOrSpecs: [System.env.CIRCLE_BRANCH])
        grgit.push(remote: remoteName, refsOrSpecs: [versionCodeTag])

    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        maven {
            url 'https://oss.jfrog.org/artifactory/libs-snapshot/'
        }
        maven {
            url  "https://twilio.jfrog.io/artifactory/internal-releases"
            credentials {
                username "${getPropertyValue('ARTIFACTORY_USERNAME')}"
                password "${getPropertyValue('ARTIFACTORY_PASSWORD')}"
            }
            metadataSources {
                mavenPom()
                artifact()
            }
        }
        maven {
            url 'https://jitpack.io'
        }
        maven {
            url = uri("https://oss.sonatype.org/content/repositories/snapshots")
        }
    }
}

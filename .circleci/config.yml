version: 2.1

aliases:
  # Workspace
  - &workspace
      ~/twilio-video-app-android

  - &gradle-cache-key
    key: jars-{{ checksum "build.gradle" }}-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
  - &restore-cache-gradle
    <<: *gradle-cache-key
    name: Restore Gradle Cache
  - &save-cache-gradle
    <<: *gradle-cache-key
    name: Save Gradle Cache
    paths:
      - ~/.gradle/caches
      - ~/.gradle/wrapper

  - &publish-to-appcenter-filter
    filters:
      branches:
        only:
          - master

executors:
  build:
    parameters:
      resource-class:
        description: "Build executor resource class"
        default: "large"
        type: string
    working_directory: *workspace
    docker:
      - image: cimg/android:2021.10.2-node
    environment:
      _JAVA_OPTIONS: "-XX:+UnlockExperimentalVMOptions -XX:+UseContainerSupport"
    resource_class: << parameters.resource-class >>

  ftl-test:
    parameters:
    working_directory: *workspace
    docker:
      - image: google/cloud-sdk:latest
    resource_class: small

commands:
  configure_git_user:
    description: Configure git user
    steps:
      - run:
          name: Configure git user
          command: |
            git config --global user.email "twilio-sdk-build@twilio.com"
            git config --global user.name "twilio-sdk-build"jobs:

  gcloud_auth:
    description: "Authenticate gcloud client"
    steps:
      - run:
          name: Google Cloud Auth
          command: echo $GCP_KEY | base64 -d | gcloud auth activate-service-account --key-file=-

  install_secrets:
    description: Extract and configure secrets required for building and publishing
    steps:
      - run:
          name: Install secrets
          command: |
            # Internal debug google services
            mkdir -p app/src/internal/debug || true
            echo $GOOGLE_SERVICES_INTERNAL_DEBUG_JSON | base64 -di > app/src/internal/debug/google-services.json
            # Internal release google services
            mkdir -p app/src/internal/release || true
            echo $GOOGLE_SERVICES_INTERNAL_RELEASE_JSON | base64 -di > app/src/internal/release/google-services.json
            # Gradle Properties
            mkdir -p ~/.gradle
            mkdir -p $PWD/secrets
            echo $ANDROID_KEYSTORE | base64 -di > $PWD/secrets/android.keystore
            echo "androidKeystore=$PWD/secrets/android.keystore" >> ~/.gradle/gradle.properties
            echo "androidKeystorePassword=$VIDEO_APP_KEYSTORE_PASSWORD" >> ~/.gradle/gradle.properties
            echo "androidReleaseKeyAlias=$VIDEO_APP_RELEASE_KEY_ALIAS" >> ~/.gradle/gradle.properties
            echo "androidReleaseKeyPassword=$VIDEO_APP_RELEASE_KEY_PASSWORD" >> ~/.gradle/gradle.properties
            echo "org.gradle.jvmargs=-Xmx4608m" >> ~/.gradle/gradle.properties
            echo "APPCENTER_APP_KEY=$APPCENTER_APP_KEY" >> ./local.properties

  setup_ftl_output:
    description: Setup environment to capture FTL output
    steps:
      - run:
          name: Setup FTL Output
          command: |
            # Google Cloud bucket we have set up for storing FTL output
            FTL_RESULTS_BUCKET=video-app-79418-ftl-output

            # Generate a sufficiently psuedo random suffix to store test results
            TIMESTAMP=`date -u "+%Y-%m-%d_%H:%M:%S"`
            RAND_SUFFIX=`openssl rand -hex 12`
            FTL_RESULTS_DIR="${TIMESTAMP}_${RAND_SUFFIX}"

            # Establish local directories to transfer and persist code coverage and result files
            JUNIT_RESULTS_DIR=video/build/outputs/test-results/junit
            LOCAL_RESULTS_DIR=video/build/outputs/test-results/${FTL_RESULTS_DIR}
            mkdir -p ${JUNIT_RESULTS_DIR}
            mkdir -p ${LOCAL_RESULTS_DIR}

            # Make environment available to other workflow steps
            echo export FTL_RESULTS_BUCKET=$FTL_RESULTS_BUCKET >>$BASH_ENV
            echo export FTL_RESULTS_DIR=$FTL_RESULTS_DIR >>$BASH_ENV
            echo export JUNIT_RESULTS_DIR=$JUNIT_RESULTS_DIR >>$BASH_ENV
            echo export LOCAL_RESULTS_DIR=$LOCAL_RESULTS_DIR >>$BASH_ENV

  retrieve_ftl_output:
    description: Download test results from FTL
    steps:
      - run:
          name: Retrieve FTL Output
          # NOTE: Ensure this step is also executed after after a failure:
          when: always
          command: |
            echo "Copying the FTL test results to a local directory..."
            DEVICES=($(gsutil ls gs://${FTL_RESULTS_BUCKET}/${FTL_RESULTS_DIR} | grep -e "/$" | awk -F "/" '{print $(NF-1)}'))
            FAILED=0
            for DEVICE in "${DEVICES[@]}"
            do
                echo "Fetching FTL test results for device ${DEVICE}"
                GSUTIL_CMD="gsutil cp \
                  gs://${FTL_RESULTS_BUCKET}/${FTL_RESULTS_DIR}/${DEVICE}/test_result_1.xml \
                  ${JUNIT_RESULTS_DIR}/${FTL_RESULTS_DIR}-${DEVICE}.xml"
                if ${GSUTIL_CMD}
                then
                    echo "Successfully retrieved FTL test results for $DEVICE"
                else
                    echo "Failed to retrieve FTL test results for $DEVICE"
                    FAILED=$((FAILED + 1))
                fi

                echo "Fetching FTL artifacts for device ${DEVICE}"
                mkdir -p ${LOCAL_RESULTS_DIR}/${DEVICE}
                GSUTIL_CMD="gsutil -m rsync -r \
                  gs://${FTL_RESULTS_BUCKET}/${FTL_RESULTS_DIR}/${DEVICE} \
                  ${LOCAL_RESULTS_DIR}/${DEVICE}"
                if ${GSUTIL_CMD}
                then
                    echo "Successfully retrieved FTL artifacts for $DEVICE"
                else
                    echo "Failed to retrieve FTL artifacts for $DEVICE"
                    FAILED=$((FAILED + 1))
                fi
            done

            # If retrieval was successful, delete the FTL results in the gcloud bucket
            if (( $FAILED == 0 ))
            then
                echo "Deleting FTL output from the gcloud bucket"
                GSUTIL_CMD="gsutil -m rm -r gs://${FTL_RESULTS_BUCKET}/${FTL_RESULTS_DIR}"
                if ${GSUTIL_CMD}
                then
                    echo "Successfully deleted FTL output from gcloud bucket"
                else
                    echo "Failed to delete FTL output from gcloud bucket"
                    FAILED=$((FAILED + 1))
                fi
            else
                echo "${FAILED} retrievals failed, leaving the FTL output in the gcloud bucket: gs://${FTL_RESULTS_BUCKET}/${FTL_RESULTS_DIR}"
            fi
            echo "Done."

jobs:
  lint:
    executor: build
    steps:
      - checkout
      - restore_cache: *restore-cache-gradle
      - install_secrets
      - run:
          name: Lint
          command: ./gradlew -q lint
      - store_artifacts:
          path: app/build/reports/lint-results.html
          destination: app
      - save_cache: *save-cache-gradle

  check-format:
    executor:
      name: build
      resource-class: medium+
    steps:
      - checkout
      - restore_cache: *restore-cache-gradle
      - run:
          name: Spotless Check
          command: ./gradlew -q spotlessCheck
      - save_cache: *save-cache-gradle

  build-app:
    executor: build
    steps:
      - checkout
      - attach_workspace:
          at: *workspace
      - restore_cache: *restore-cache-gradle
      - install_secrets
      - run:
          name: Store Test Credentials
          command: echo $TEST_CREDENTIALS_JSON | base64 -di > app/src/androidTest/assets/Credentials/TestCredentials.json
      - run:
          name: Build All APKs
          command: ./gradlew -q app:assemble app:assembleInternalDebugAndroidTest
      - persist_to_workspace:
          root: .
          paths:
            - app/build
      - save_cache: *save-cache-gradle

  unit-tests:
    executor: build
    steps:
      - checkout
      - attach_workspace:
          at: *workspace
      - restore_cache: *restore-cache-gradle
      - install_secrets
      - run:
          name: Unit Tests
          command: ./gradlew app:testInternalDebugUnitTest
      - save_cache: *save-cache-gradle

  community-unit-tests:
    executor: build
    steps:
      - checkout
      - attach_workspace:
          at: *workspace
      - restore_cache: *restore-cache-gradle
      - install_secrets
      - run:
          name: Community Unit Tests
          command: ./gradlew app:testCommunityDebugUnitTest
      - save_cache: *save-cache-gradle

  e2e-tests:
    executor: ftl-test
    steps:
      # Setup
      - checkout
      - attach_workspace:
          at: *workspace
      - gcloud_auth
      - setup_ftl_output
      - run:
          name: E2E Tests
          # Circle CI has a default timeout that will fail build steps if there is no output for 10 minutes.
          no_output_timeout: 30m
          command: >
            gcloud firebase test android run --num-flaky-test-attempts=1 --use-orchestrator --environment-variables clearPackageData=true --project video-app-79418 --results-bucket $FTL_RESULTS_BUCKET --results-dir ${FTL_RESULTS_DIR}
            ui-test-args.yaml:e2e-tests
      - retrieve_ftl_output
      - store_test_results:
          path: video/build/outputs/test-results/junit
      - store_artifacts:
          path: video/build/outputs/test-results
          destination: test-results

  integration-tests:
    executor: ftl-test
    steps:
      # Setup
      - checkout
      - attach_workspace:
          at: *workspace
      - gcloud_auth
      - setup_ftl_output
      - run:
          name: Integration Tests
          # Circle CI has a default timeout that will fail build steps if there is no output for 10 minutes.
          no_output_timeout: 30m
          command: >
            gcloud firebase test android run --use-orchestrator --environment-variables clearPackageData=true --project video-app-79418 --results-bucket $FTL_RESULTS_BUCKET --results-dir ${FTL_RESULTS_DIR}
            ui-test-args.yaml:integration-tests
      - retrieve_ftl_output
      - store_test_results:
          path: video/build/outputs/test-results/junit
      - store_artifacts:
          path: video/build/outputs/test-results
          destination: test-results

  build-release-app:
    executor: build
    steps:
      - checkout
      - attach_workspace:
          at: *workspace
      - restore_cache: *restore-cache-gradle
      - install_secrets
      - configure_git_user
      - run:
          name: Increment Version Code
          command: ./gradlew incrementVersionCode
      - run:
          name: Build Release APK
          command: ./gradlew -q app:assembleInternalRelease
      - persist_to_workspace:
          root: .
          paths:
            - app/build
      - save_cache: *save-cache-gradle

  publish-to-appcenter:
    executor:
      name: build
      resource-class: medium+
    steps:
      - attach_workspace:
          at: *workspace
      - run:
          # TODO Ticket to improve build time here https://issues.corp.twilio.com/browse/AHOYAPPS-67
          # TODO Ticket to add latest changelog update https://issues.corp.twilio.com/browse/AHOYAPPS-94
          command: |
            sudo npm install webpack
            echo no | sudo npm install -g appcenter-cli
            appcenter login --token $APPCENTER_API_TOKEN
            appcenter distribute release -f app/build/outputs/apk/internal/release/app-internal-release.apk -g Testers --app nico-hokeyapp-dzyz/Video-App-Internal

workflows:
  build-test:
    jobs:
      - lint
      - check-format
      - build-app
      - unit-tests:
          requires:
            - build-app
            - lint
            - check-format
      - community-unit-tests:
          requires:
            - build-app
            - lint
            - check-format
      - e2e-tests:
          requires:
            - build-app
            - lint
            - check-format
      - integration-tests:
          requires:
            - build-app
            - lint
            - check-format

  publish-to-appcenter:
    jobs:
      - build-release-app:
          <<: *publish-to-appcenter-filter
      - publish-to-appcenter:
          <<: *publish-to-appcenter-filter
          requires:
            - build-release-app